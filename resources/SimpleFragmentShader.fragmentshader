#version 330 core

in vec3 Normal;
in vec3 objPos;
// Ouput data
out vec4 color;

uniform vec3 luzPos;
uniform vec3 camPos;

void main()
{   
    vec3 luz_color = vec3(0.3,0.3,0.3);
    vec3 ambient = luz_color * 0.1;

    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(luzPos - objPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = luz_color * diff;

    vec3 viewDir = normalize(camPos - objPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 2);
    vec3 specular = 0.5 * spec * luz_color;

    vec3 lightDir_spot = normalize(vec3(-4,0,3) - objPos);
    vec3 reflectDir_spot = reflect(-lightDir_spot, norm);
    float spec_spot = pow(max(dot(viewDir, reflectDir_spot), 0.0), 2);
    vec3 specular_spot = 0.5 *  spec_spot * vec3(1,1,1);  
    float theta = dot(lightDir_spot, normalize(-vec3(4,0,-3)));
    float cutOff = cos(1.0 * 3.14 / 180.0);
    float outerCutOff = cos(2.0 * 3.14 / 180.0);
    float epsilon = (cutOff - outerCutOff);
    float intensity = clamp((theta - outerCutOff) / epsilon, 0.0, 1.0);
    specular_spot *= intensity;

    // vec3 lightDir_spot = normalize(normalize(vec3(-4,3,3))*2 - objPos);
    // float theta = max(dot(lightDir_spot, normalize(-vec3(4,-3,-3))),0);
    // float cutOff = cos(10.0 * 3.14 / 180.0);
    // float outerCutOff = cos(17.0 * 3.14 / 180.0);
    // float epsilon   = cutOff - outerCutOff;
    // float intensity = clamp((theta - outerCutOff) / epsilon, 0.0, 1.0);
    // vec3 spot = vec3(0,0,0);
    // vec3 reflectDir_spot = reflect(-lightDir_spot, norm);
    // float spec_spot = pow(max(dot(viewDir, reflectDir_spot), 0.0), 32);
    // spot = 1 * luz_color * intensity;
    
	// Output color = red 
    color = vec4(ambient + diffuse + specular + specular_spot, 1);
    // color = vec4(specular_spot, 1);
    // color = vec4(norm,1);
}